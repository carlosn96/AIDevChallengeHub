rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isManager() {
      return exists(/databases/$(database)/documents/permissions/managers) &&
             get(/databases/$(database)/documents/permissions/managers).data.emails.has(request.auth.token.email);
    }
    
    // Settings can be read by anyone, but only written by managers.
    match /settings/login {
      allow read: if true;
      allow write: if isManager();
    }

    // Users can read their own profile, managers can read any profile.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isManager());
      // Users are created via a server-side action after auth.
      // Updates to teamId are handled by a server-side action.
      allow write: if false; 
    }

    // Teams can be read by anyone (for now), but only updated by managers or server actions.
    match /teams/{teamId} {
      allow read: if request.auth != null;
      // Team name can be updated by its members. Project assignment only by manager.
      allow update: if request.auth != null && 
                       ((request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name']) && request.auth.uid in resource.data.memberIds) ||
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['projectId']) && isManager()));
      // Team creation and member assignment is handled server-side.
      allow create, delete: if false;
    }
    
    // Projects can be read by any authenticated user.
    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow write: if isManager(); // Full CRUD for managers
    }
    
    // Schedule can be read by any authenticated user.
    match /schedule/{eventId} {
      allow read: if request.auth != null;
      allow write: if isManager();
    }
    
    // Days can be read by any authenticated user.
    match /days/{dayId} {
      allow read: if request.auth != null;
      allow write: if isManager();
    }

    // Manager permissions list is read-only for clients.
    match /permissions/{docId} {
      allow read, write: if false;
    }
  }
}
