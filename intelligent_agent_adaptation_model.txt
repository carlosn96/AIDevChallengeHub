# Manager Role Functionality & Business Logic Adaptation Guide

## 1. Introduction

This document outlines the current data management capabilities of the **Manager** role within the application. Its purpose is to serve as a canonical source of truth for an intelligent agent, ensuring that any future code modifications or adaptations strictly adhere to the established business logic.

The Manager's primary responsibility is the administration of the event's core entities. This guide details the specific Create, Read, Update, and Delete (CRUD) operations the Manager can perform on each data type.

---

## 2. Core Principle: Adherence to Existing Logic

The agent MUST treat the functionality described herein as the definitive specification for the Manager's permissions and actions. When requested to modify or extend functionality, the agent must use this guide to ensure that its changes are consistent with the existing data model and operational workflows.

- **Data Source**: Firestore
- **Access Point**: The Manager Dashboard (`/dashboard` for a user with the 'Manager' role).
- **UI Components**: The logic is primarily implemented within `manager-dashboard.tsx` and its child components (`team-management.tsx`, `project-management.tsx`, `schedule-management.tsx`, `settings-management.tsx`).
- **Backend Actions**: All data mutations are handled by functions within `lib/user-actions.ts`.

---

## 3. Data Entity Management Breakdown

### 3.1. Projects (`Project` Entity)

- **Entity Schema**: `{ id, name, description, createdAt }`
- **Management UI**: "Projects" tab in the Manager Dashboard (`project-management.tsx`).

#### **Business Logic & Required Adaptations:**

-   **Create**: Managers can create new projects. The creation form requires a `name` and a `description`. The `createdAt` timestamp is automatically generated by the server.
    -   *Adaptation Rule*: When adding new fields to the `Project` entity, the agent must update the creation dialog in `project-management.tsx` to include form inputs for those new fields if they are required at creation.

-   **Read**: Managers can view all created projects in a grid layout. Each project card displays its name, description, and creation date.
    -   *Adaptation Rule*: If a new field is added to `Project` (e.g., `status`), the agent should update the project card UI to display this new information.

-   **Update**: Managers can edit the `name` and `description` of any existing project.
    -   *Adaptation Rule*: If other fields of a `Project` are to be made editable, the agent must add corresponding form inputs to the "Edit Project" dialog.

-   **Delete**: Managers can delete any project. This action triggers a **cascading delete**:
    1.  The `Project` document is deleted from Firestore.
    2.  The `projectId` field is set to `null` on all `Team` documents that were assigned to the deleted project. This prevents broken references.
    -   *Adaptation Rule*: This cascading logic in `user-actions.ts` is critical. The agent must not alter this behavior unless specifically instructed to change how team assignments are handled upon project deletion.

### 3.2. Teams (`Team` Entity)

- **Entity Schema**: `{ id, name, memberIds, projectId, memberCount, createdAt }`
- **Management UI**: "Team Management" tab (`team-management.tsx`).

#### **Business Logic & Required Adaptations:**

-   **Create**: Team creation is **automated**. The system automatically creates teams and assigns users with the 'Student' role to them (`assignStudentToTeam` action). Managers do not create teams manually.
    -   *Adaptation Rule*: The agent must not implement manual team creation functionality for the Manager unless explicitly told to change this core business rule.

-   **Read**: Managers can view all teams in a table. Clicking a team opens a modal displaying its members and the currently assigned project.
    -   *Adaptation Rule*: If team information is expanded (e.g., adding a team status), the agent should add new columns or display elements to `team-management.tsx` to show it.

-   **Update**: Managers can perform two update actions:
    1.  **Assign a project**: They use a searchable combobox to select a project for a team.
    2.  **Remove a member**: From the team details modal, a manager can remove a specific student from a team. This action sets the student's `teamId` to `null`, making them eligible for automatic re-assignment. It does not delete the user account.
    -   *Adaptation Rule*: The agent must not add team name editing to the `team-management` component, as this conflicts with the logic where students manage their own team names.

-   **Delete**: Managers can delete a team. This action is **non-destructive to user accounts** and triggers the following cascading logic:
    1.  The `Team` document is deleted from Firestore.
    2.  The `teamId` field is set to `null` on all `UserProfile` documents for the members of that team. This makes them eligible for automatic re-assignment.
    -   *Adaptation Rule*: The agent must preserve this cascading logic. The user accounts themselves must not be deleted.

### 3.3. Schedule (`Day` & `ScheduleEvent` Entities)

- **Entity Schemas**:
    - `Day`: `{ id, title, date, createdAt }`
    - `ScheduleEvent`: `{ id, dayId, title, type, startTime, endTime, description, location }`
- **Management UI**: "Schedule" tab (`schedule-management.tsx`).

#### **Business Logic & Required Adaptations:**

-   **Day Management**:
    -   **Create/Read/Update**: Managers have full CRUD control over `Day` entities. They can create new days, update their title and date, and view them as distinct sections in the UI.
    -   **Delete**: Deleting a `Day` triggers a **cascading delete** of all `ScheduleEvent` documents associated with that `dayId`.
    -   *Adaptation Rule*: The agent must preserve the cascading delete logic in `user-actions.ts`. When adding fields to the `Day` entity, the agent must update the "Create/Edit Day" dialog form.

-   **Event Management**:
    -   **Create/Read/Update**: Within each `Day`, Managers have full CRUD control over `ScheduleEvent` entities. Events cannot be created without being associated with a parent `Day`.
    -   **Delete**: Deleting an event removes only that single `ScheduleEvent` document.
    -   *Adaptation Rule*: The event creation/editing logic requires converting string time inputs (e.g., "09:00") into full `Timestamp` objects based on the parent `Day`'s date. The agent must replicate this logic if it modifies or extends event creation.

### 3.4. Application Settings (`LoginSettings` Entity)

- **Entity Schema**: `{ enabled, disabledMessage }`
- **Firestore Path**: `/settings/login`
- **Management UI**: "Settings" tab (`settings-management.tsx`).

#### **Business Logic & Required Adaptations:**

-   **Read/Update**: Managers can read and update the global login settings. This includes:
    1.  An `enabled` switch (boolean) to allow or block user sign-ins.
    2.  A `disabledMessage` (string) to be displayed on the login page when login is disabled.

-   **Access Override**: The system contains a critical override: **users with the 'Manager' role can always log in, regardless of the `enabled` flag's state.** This prevents administrators from being locked out.
    -   *Adaptation Rule*: This override is enforced in `context/settings-context.tsx`. The agent must never remove or alter this check, as it is a crucial safeguard for application administration. The logic flow is: User authenticates -> Role is checked -> If role is NOT 'Manager' AND login is disabled, the user is immediately signed out.
